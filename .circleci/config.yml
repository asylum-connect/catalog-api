#Alfredo Moreira
#Put this file in a .circleci/ folder
#This file is to be used to run Github Status Checks
version: 2.1
orbs:
  node: circleci/node@3.0.0
  codecov: codecov/codecov@1.1.3
jobs: 
  build:
    docker:
      - image: circleci/node:15.6.0
    working_directory: ~/catalog-api
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: 
          name: Check Node Version
          command: node --version
      - run:
          name: Install Packages
          command: npm install
      #save cache for use next tests
      - save_cache:
         paths:
          - node_modules
         key: v1-dependencies-{{ checksum "package.json" }}
      #Recreate .env file from CircleCI Project Env Vars
      - run:
          name: Create .env file
          command: |
           cat \<< EOF > ./.env
           MAILGUN_API_KEY=$MAILGUN_API_KEY
           MAILGUN_DOMAIN=$MAILGUN_DOMAIN
           DB_URI=$DB_URI
           SHEETS_API_KEY=$SHEETS_API_KEY
           EOF

      #Building and Compiling Binary
      - run: 
          name: Compile Binary
          command: npm run build

  unit:
    docker:
      - image: circleci/node:15.6.0
    working_directory: ~/catalog-api
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: 
          name: Check Node Version
          command: node --version
      - run:
          name: Install Packages
          command: npm install
      #save cache for use next tests
      - save_cache:
         paths:
          - node_modules
         key: v1-dependencies-{{ checksum "package.json" }}
      #Remove babelrc file so Unit Tests can run 
      #TODO figure out how to make them play nicely
      - run:
          name: "Delete .babelrc file"
          command: "rm ./.babelrc"
      #Unit Testing
      - run: 
          name: "Unit Testing"
          command: "npm run pre-unit-test && npm run unit-test" 
      - codecov/upload:
          file: 'jestCoverage/coverage-final.json'
          flags: 'Unit-Tests'
      - store_test_results:
          path: junit.xml
    
  e2e:
    docker:
      - image: cypress/base:10
        environment:
          ## this enables colors in the output
          TERM: xterm
    working_directory: ~/catalog-api
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: 
          name: Check Node Version
          command: node --version
      - run:
          name: Install Packages
          command: npm install
      - run:
          name: Install NYC
          command: npm i nyc
      #save cache for use next tests
      - save_cache:
         paths:
          - node_modules
         key: v1-dependencies-{{ checksum "package.json" }}
      #Recreate .env file from CircleCI Project Env Vars
      - run:
          name: Create .env file
          command: |
           cat \<< EOF > ./.env
           MAILGUN_API_KEY=$MAILGUN_API_KEY
           MAILGUN_DOMAIN=$MAILGUN_DOMAIN
           DB_URI=$DB_URI
           SHEETS_API_KEY=$SHEETS_API_KEY
           EOF
      #TODO to be removed once fiogure out how to make jest and cypress work together
      - run:
          name: Create .babelrc file
          command: |
           cat \<< EOF > ./.babelrc
           {
               "plugins":["istanbul"]
           }
           EOF
      #Testing
      - run: 
          name: "E2E Automation"
          command: "npm run pre-e2e-test && npm run e2e && npm run post-e2e-test"
      - run:
          name: "Show Coverage"
          command: "npm run show-coverage"
      - codecov/upload:
          file: 'cypressCoverage/coverage-final.json'
          flags: 'Integration'
      
      - store_artifacts:
          path: "reports/"

workflows:
  version: 1
  pull_request:
    jobs:
      - build
      - e2e:
         requires:
          - unit
      - unit